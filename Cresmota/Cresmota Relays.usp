/** MODULE INFORMATION ********************************************************
Name........: Cresmota - Relays
Version.....: 20210223
Author......: Edward Wright


*** MIT LICENSE ***************************************************************

Copyright (c) 2021 Edward Wright

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


*** REVISION HISTORY **********************************************************
20210223 - initial release


/** COMPILER DIRECTIVES ******************************************************/
#symbol_name "Cresmota - Relays"
#user_simplsharp_library "SimplMQTT.Client"
#category "46" "Cresmota"
#default_volatile
#enable_stack_checking


/** CONSTANT DEFINITIONS *****************************************************/
#define_constant MODULE_NAME	"Cresmota-Relays"
#define_constant MODULE_VERSION	"0.1.0"

#define_constant LOGGING	1

#define_constant NUM_RELAYS 8

#define_constant MAX_TOPIC_LENGTH	255
#define_constant MAX_MSG_LENGTH		255
#define_constant MAX_NAME_LENGTH	50
#define_constant BUFFER_SIZE		2048

#define_constant STOPPED	0
#define_constant STOPPING	1
#define_constant STARTING	2
#define_constant STARTED	3

#define_constant QOS_0	0 
#define_constant QOS_1	1

#define_constant RETAIN_OFF	0
#define_constant RETAIN_ON	1

#define_constant CLEAN_SESSION 1

#define_constant TOPIC_CMND			"cmnd"
#define_constant TOPIC_TELE			"tele"
#define_constant TOPIC_STAT			"stat"
#define_constant TOPIC_LWT			"LWT"
#define_constant TOPIC_DISCOVERY	"tasmota/discovery"
#define_constant TOPIC_CONFIG		"config"
#define_constant TOPIC_SENSORS		"sensors"
#define_constant TOPIC_STATE		"STATE"

#define_constant OFFLINE 0
#define_constant ONLINE 1

#define_constant ID_PREFIX "0E107F0000"


/** PARAMETER DEFINITIONS ****************************************************/
string_parameter DeviceName[50];
#begin_parameter_properties DeviceName
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propShortDescription = "Friendly name for this device.";
#end_parameter_properties

integer_parameter CresmotaID;
#begin_parameter_properties CresmotaID
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propBounds = 0d, 254d;
	propDefaultValue = 0d;
	propShortDescription = "Cresmota ID number.  Must be unique for each Cresmota device connecting to the same MQTT broker.";
#end_parameter_properties

string_parameter ClientID[50];
#begin_parameter_properties ClientID
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propShortDescription = "String used to identify the client to the broker - must be unique for each client.";
#end_parameter_properties

string_parameter BrokerAddress[14];
#begin_parameter_properties BrokerAddress
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propShortDescription = "IP address of the MQTT broker.";
#end_parameter_properties

integer_parameter BrokerPort;
#begin_parameter_properties BrokerPort
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propBounds = 1025d, 65535d;
	propDefaultValue = 1883d;
	propShortDescription = "TCP port used by the MQTT broker (default = 1883, or 8883 for SSL).";
#end_parameter_properties

string_parameter Username[50];
#begin_parameter_properties Username
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Username to authenticate with the broker.";
#end_parameter_properties

string_parameter Password[50];
#begin_parameter_properties Password
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Password to authenticate with the broker.";
#end_parameter_properties

integer_parameter UseSSL;
#begin_parameter_properties UseSSL
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propDefaultValue = 0d;
	propList = {0d, "False"}, {1d, "True"};
	propShortDescription = "Set to True to enable SSL encryption.";
#end_parameter_properties

string_parameter SSLCertificateFile[100];
#begin_parameter_properties SSLCertificateFile
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "x";
	propShortDescription = "Filename of SSL Certificate (must be located in NVRAM folder).";
#end_parameter_properties

string_parameter SSLPrivateKeyFile[100];
#begin_parameter_properties SSLPrivateKeyFile
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "x";
	propShortDescription = "Filename of SSL Private Key (must be located in NVRAM folder).";
#end_parameter_properties

string_parameter Topic[MAX_TOPIC_LENGTH];
#begin_parameter_properties Topic
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Unique MQTT topic for this device.";
#end_parameter_properties

integer_parameter ReportAs;
#begin_parameter_properties ReportAs
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propDefaultValue = 0d;
	propList = {0d, "Relays"}, {1d, "Lights"};
	propShortDescription = "Choose how these relays will be advertised in autodiscovery.";
#end_parameter_properties

string_parameter _skip_, _skip_;

string_parameter Name[NUM_RELAYS, NUM_RELAYS][MAX_NAME_LENGTH];
#begin_parameter_properties Name
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Friendly Name for individual relays.";
#end_parameter_properties


/** MODULE INPUT/OUTPUT DEFINITIONS ******************************************/
digital_input	_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				enable, _skip_, state[NUM_RELAYS, NUM_RELAYS]
;
digital_output	_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				connect_fb, _skip_, toggle[NUM_RELAYS], _skip_, turn_on[NUM_RELAYS], _skip_, turn_off[NUM_RELAYS, NUM_RELAYS]
;


/** CUSTOM STRUCTURES ********************************************************/


/** GLOBAL VARIABLES *********************************************************/
integer	g_initialized, g_state;

string	g_id$[12], g_relayState$[2][3];

MqttClient g_client;


/** LOCAL FUNCTIONS **********************************************************/
function initializeClient()
{
	string scratch_topic$[MAX_TOPIC_LENGTH];

	makeString(g_id$, "%s%02X", ID_PREFIX, CresmotaID);
	
	makeString(scratch_topic$, "%s/%s/%s", TOPIC_TELE, Topic, TOPIC_LWT);

	g_client.Log(LOGGING);

	g_client.Initialize(
		ClientID,
		BrokerAddress,
		BrokerPort,
		UseSSL,
		Username,
		Password,
		on,
		RETAIN_ON,
		QOS_1,
		scratch_topic$,
		"Offline",
		CLEAN_SESSION,
		BUFFER_SIZE
	);

	RegisterEvent (g_client, MessageArrived, MessageArrivedEventHandler);
	RegisterEvent (g_client, ErrorOccured, ErrorOccuredEventHandler);
	RegisterEvent (g_client, ConnectionStateChanged, ConnectionStateChangedEventHandler);

	if (UseSSL)
	{
		if ((len(SSLCertificateFile) > 1) && (len(SSLPrivateKeyFile) > 1))
			g_client.UseCertificate(SSLCertificateFile, SSLPrivateKeyFile);
	}

	makeString(scratch_topic$, "%s/%s/#", TOPIC_CMND, Topic);
	g_client.AddSubscription(scratch_topic$, QOS_0);
}

string_function getTimestamp()
{
	return("YYYY-MM-DDTHH:MM:SS");
}

function publishAutoDiscovery()
{
	string scratch_topic$[MAX_TOPIC_LENGTH], message$[BUFFER_SIZE], scratch$[512];
	
	// autodiscovery config topic
	makeString(scratch_topic$, "%s/%s/%s", TOPIC_DISCOVERY, g_id$, TOPIC_CONFIG);

	// opening brace
	message$ = "{";
    
	// add ip address (just send a throwaway value)
	message$ = message$ + "\x22ip\x22:\x22x.x.x.x\x22,";
    
	// add device name
	message$ = message$ + "\x22dn\x22:\x22" + DeviceName + "\x22,";
    
	// add friendly names
	makeString(scratch$,
		"\x22fn\x22:[\x22%s\x22,\x22%s\x22,\x22%s\x22,\x22%s\x22,\x22%s\x22,\x22%s\x22,\x22%s\x22,\x22%s\x22],",
		Name[1], Name[2], Name[3], Name[4], Name[5], Name[6], Name[7], Name[8]
	);	
	message$ = message$ + scratch$;
    
	// add hostname (just use ClientID - there is no actual hostname for this device)
	message$ = message$ + "\x22hn\x22:\x22" + ClientID + "\x22,";
    
	//add mac address (device id)
	message$ = message$ + "\x22mac\x22:\x22" + g_id$ + "\x22,";
    
	// add module (template) name
	message$ = message$ + "\x22md\x22:\x22" + MODULE_NAME + "\x22,";

	// add static stuff
	message$ = message$ + "\x22ty\x22:0,\x22if\x22:0,\x22ofln\x22:\x22Offline\x22,\x22onln\x22:\x22Online\x22,\x22state\x22:[\x22OFF\x22,\x22ON\x22,\x22TOGGLE\x22,\x22HOLD\x22],";
    
	// add software version
	message$ = message$ + "\x22sw\x22:\x22" + MODULE_VERSION + "\x22,";
    
	// add mqtt topic
	message$ = message$ + "\x22t\x22:\x22" + Topic + "\x22,";
    
	// add static stuff
	message$ = message$ + "\x22ft\x22:\x22%prefix%/%topic%/\x22,\x22tp\x22:[\x22cmnd\x22,\x22stat\x22,\x22tele\x22],";
	message$ = message$ + "\x22rl\x22:[1,1,1,1,1,1,1,1],";
    message$ = message$ + "\x22swc\x22:[-1,-1,-1,-1,-1,-1,-1,-1],";
    message$ = message$ + "\x22swn\x22:[null,null,null,null,null,null,null,null],";
    message$ = message$ + "\x22btn\x22:[0,0,0,0,0,0,0,0],";    
	
	// add SetOptions, currently static except for using ReportAs parameter for option #30
	makeString(scratch$, "\x22so\x22:{\x224\x22:0,\x2211\x22:0,\x2213\x22:0,\x2217\x22:0,\x2220\x22:0,\x2230\x22:%u,\x2268\x22:0,\x2273\x22:0,\x2282\x22:0,\x22114\x22:0,\x22117\x22:0},", ReportAs);
	message$ = message$ + scratch$;

	// add remaining static stuff
	message$ = message$ + "\x22lk\x22:1,\x22lt_st\x22:0,\x22sho\x22:[0,0,0,0],\x22ver\x22:1";

	// closing brace
	message$ = message$ + "}";
	
	g_client.Publish(scratch_topic$, message$, RETAIN_ON);

	// publish autodiscovery sensors
	makeString(scratch_topic$, "%s/%s/%s", TOPIC_DISCOVERY, g_id$, TOPIC_SENSORS);
	makeString(message$, "{\x22sn\x22:{\x22Time\x22:\x22%s\x22},\x22ver\x22:1}", getTimestamp())	;
	g_client.Publish(scratch_topic$, message$, RETAIN_ON);
}

function publishState()
{
	integer	i;
	string scratch_topic$[MAX_TOPIC_LENGTH], message$[BUFFER_SIZE], scratch$[512];
	
	makeString(scratch_topic$, "%s/%s/%s", TOPIC_TELE, g_id$, TOPIC_STATE);
	
	// opening brace
	message$ = "{";

	// add timestamp
    message$ = message$ + "\x22Time\x22:\x22" + getTimestamp() + "\x22,";

	// add static values for statistics we don't track
    message$ = message$ + "\x22Uptime\x22:\x220T00:00:00\x22,\x22UptimeSec\x22: 0,\x22Heap\x22:28,\x22SleepMode\x22:\x22Dynamic\x22,\x22Sleep\x22:50,\x22LoadAvg\x22:19,\x22MqttCount\x22:1,";

    // add states as reported by digital inputs
	for (i = 1 to NUM_RELAYS)
	{
		makeString(scratch$, "\x22POWER%u\x22:\x22%s\x22,", i, g_relayState$[state[i]]);
		message$ = message$ + scratch$;
	}	
    
	// add static values for wifi stuff that is irrelevant here
	message$ = message$ + "\x22Wifi\x22:{\x22AP\x22:1,\x22SSId\x22:\x22x\x22,\x22BSSId\x22:\x22xx:xx:xx:xx:xx:xx\x22,\x22Channel\x22:1,\x22RSSI\x22:70,\x22Signal\x22:-65,\x22LinkCount\x22:1,\x22Downtime\x22:\x220T00:00:00\x22}";

	// closing brace
	message$ = message$ + "}";
	
	g_client.Publish(scratch_topic$, message$, RETAIN_OFF);
}

function publishAvailability(integer arg_status)
{
	string will_topic$[MAX_TOPIC_LENGTH];

	makeString(will_topic$, "%s/%s/%s", TOPIC_TELE, Topic, TOPIC_LWT);

	if (arg_status = OFFLINE)
		g_client.Publish(will_topic$, "Offline", RETAIN_ON);
	else
		g_client.Publish(will_topic$, "Online", RETAIN_OFF);
}


/** MODULE EVENTS ************************************************************/
push enable
{
	if (!g_initialized || (g_state > STOPPING)) terminateEvent;

	while (g_state = STOPPING) delay(2);

	g_state = STARTING;

		g_client.Start();

	g_state = STARTED;
}


release enable
{
	if (!g_initialized || (g_state < STARTING)) terminateEvent;

	while (g_state = STARTING) delay(2);

	g_state = STOPPING;
	
		// if we're currently connected, publish current state and manually send will
		if (connect_fb)
		{
			publishState();
			publishAvailability(OFFLINE);
			processLogic();
		}
		
		g_client.Stop();

	g_state = STOPPED;
}


/** EVENT HANDLERS ***********************************************************/
eventhandler ConnectionStateChangedEventHandler(MqttClient client , ConnectionStateChangedEventArgs e)
{
	connect_fb = e.State;

	if (connect_fb)
	{
        publishAvailability(ONLINE);
		publishAutoDiscovery();
	}
}


eventhandler MessageArrivedEventHandler(MqttClient client, MessageReceivedEventArgs e)                                                                       
{
	/*
	integer i;

	for(i = 1 to NUM_TOTAL)
	{
		// check if topic matches something we have subscribed to
		if ((g_topic[i].QoS <= QOS_1) && (g_topic[i].Value = e.Topic))
		{
			// subscription associated with a digital output
			if (i <= NUM_DIGITAL)
				d_out[i] = min(atoi(e.Value), 1);
			
			// subscription associated with an analog output
			else if (i <= (NUM_DIGITAL + NUM_ANALOG))
				a_out[i - NUM_DIGITAL] = atoi(e.Value);

			// subscription associated with a serial output
			else
				s_out$[i - NUM_DIGITAL - NUM_ANALOG] = e.Value;
		}	
	}
	*/
}


eventhandler ErrorOccuredEventHandler(MqttClient client , ErrorOccuredEventArgs e)
{
	// not used at this time
}


 /** INITIALIZATION **********************************************************/
function main()
{
	g_initialized = off;

		g_state = STOPPED;

		g_relayState$[off] = "OFF";
		g_relayState$[on] = "ON";
		
		waitForInitializationComplete();

		initializeClient();

	g_initialized = on;
}
