/** MODULE INFORMATION ********************************************************
Name........: Cresmota Device
Author......: Edward Wright


*** MIT LICENSE ***************************************************************

Copyright (c) 2024 Edward Wright

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


/** COMPILER DIRECTIVES ******************************************************/
#symbol_name "Cresmota Device"
#category "46" "Cresmota"
#default_volatile
#enable_stack_checking
#user_simplsharp_library "Cresmota"


/** CONSTANT DEFINITIONS *****************************************************/
#define_constant MAX_CHANNELS 128
#define_constant MAX_NAME_LENGTH 50


/** PARAMETER DEFINITIONS ****************************************************/ 
integer_parameter ID;
#begin_parameter_properties ID
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propBounds = 1d, 99d;
	propDefaultValue = 1d;
	propShortDescription = "Module ID - must be unique for each Cresmota module within a program slot.";
#end_parameter_properties

string_parameter DeviceName[150];
#begin_parameter_properties DeviceName
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Name of the Cresmota device.";
#end_parameter_properties

string_parameter Broker[50];
#begin_parameter_properties Broker
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "MQTT Broker IP address or hostname.";
#end_parameter_properties
	
integer_parameter Port;
#begin_parameter_properties Port
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propBounds = 1d, 65535d;
	propDefaultValue = 1883d;
	propShortDescription = "MQTT Broker port.";
#end_parameter_properties

string_parameter Username[50];
#begin_parameter_properties Username
	propDefaultUnit	= unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "MQTT Broker username.";
#end_parameter_properties

string_parameter Password[50];
#begin_parameter_properties Password
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "MQTT Broker password.";
#end_parameter_properties

integer_parameter AutoDiscovery;
#begin_parameter_properties AutoDiscovery
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propDefaultValue = 1d;
	propList = {0d, "Disabled"},{1d, "Enabled"};
	propShortDescription = "Enable or disable Tasmota auto-discovery for Home Assistant.";
#end_parameter_properties

integer_parameter ReportAs;
#begin_parameter_properties ReportAs
	propDefaultUnit = unitDecimal;
	propValidUnits = unitDecimal;
	propDefaultValue = 0d;
	propList = {0d, "Relay(s)"},{1d, "Light(s)"};
	propShortDescription = "Report as relay(s) or light(s) to Home Assistant.";
#end_parameter_properties

string_parameter _skip_, _skip_, _skip_, Name[MAX_CHANNELS, MAX_CHANNELS][MAX_NAME_LENGTH];
#begin_parameter_properties Name
	propDefaultUnit = unitString;
	propValidUnits = unitString;
	propDefaultValue = "";
	propShortDescription = "Friendly name for individual relay/light channels.";
#end_parameter_properties


/** I/O DEFINITIONS **********************************************************/
digital_input	_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				enable, debug, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				state[MAX_CHANNELS, MAX_CHANNELS]
;
digital_output	_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				enable_fb, debug_fb, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				turn_on[MAX_CHANNELS], _skip_,
				turn_off[MAX_CHANNELS, MAX_CHANNELS]
;
analog_input	_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
				_skip_, _skip_, level_in[MAX_CHANNELS, MAX_CHANNELS]
;
analog_output	_skip_, level_out[MAX_CHANNELS, MAX_CHANNELS]
;

/** GLOBAL VARIABLE DEFINITIONS **********************************************/
integer	g_initialized;

CresmotaDevice g_cresmota;


/** HELPER FUNCTIONS *********************************************************/
function InitializeChannels()
{
	integer i;

	for (i = 1 to MAX_CHANNELS)
	{
		if (Name[i] != "")
		{
			g_cresmota.AddChannel(Name[i]);
		}
		else
		{
			break;
		}
	}
}


/** MODULE EVENTS ************************************************************/
push enable
{
	if (g_initialized)
	{
		g_cresmota.Start();
		enable_fb = on;
	}
}

release enable
{
	if (g_initialized)
	{
		enable_fb = off;
		g_cresmota.Stop();
	}
}

push debug
{
	if (g_initialized)
	{
		g_cresmota.StartDebugging();
	}
}

release debug
{
	if (g_initialized)
	{
		g_cresmota.StopDebugging();
	}
}

change state
{
	integer i;
	
	i = getLastModifiedArrayIndex();
	
	if (g_initialized)
	{
		g_cresmota.SetPower(i, state[i]);
	}
}

change level_in
{
	integer i;
	
	i = getLastModifiedArrayIndex();
	
	if (g_initialized)
	{
		g_cresmota.SetLevel(i, level_in[i]);
	}
}


/** SIMPL# CALLBACK FUNCTIONS ************************************************/
callback function UpdateDebugStatus(integer value)
{
	debug_fb = (value > 0);
}

callback function PowerRequest(integer channel, integer state)
{
	if (state)
	{
		pulse(1, turn_on[channel]);
	}
	else
	{
		pulse(1, turn_off[channel]);
	}
}

callback function LevelRequest(integer channel, integer level)
{
	level_out[channel] = level;
}


/** MODULE INITIALIZATION ****************************************************/
function main()
{
	g_initialized = off;

	debug_fb = off;

	RegisterDelegate(g_cresmota, DebugStatusDelegate, UpdateDebugStatus);
	RegisterDelegate(g_cresmota, PowerRequestDelegate, PowerRequest);
	RegisterDelegate(g_cresmota, LevelRequestDelegate, LevelRequest);


	WaitForInitializationComplete();

	if (debug) g_cresmota.StartDebugging();

	g_cresmota.ProgramSlot = GetProgramNumber();
	g_cresmota.ID = ID;
	g_cresmota.DeviceName = DeviceName;
	g_cresmota.BrokerAddress = Broker;
	g_cresmota.BrokerPort = Port;
	g_cresmota.Username = Username;
	g_cresmota.Password = Password;
	g_cresmota.AutoDiscovery = AutoDiscovery;
	g_cresmota.ReportAs = ReportAs;

	InitializeChannels();

	g_initialized = on;
}
